# Automatically build rules from submakefiles

.PHONY: default help all dep clean distclean cleandep cleangen install
default: showhelp

# Forget all the built-in exotic suffixes
.SUFFIXES:
# Declare only actually used suffixes
.SUFFIXES: .dep

# Default groups of build targets
GROUPS := APPS TOOLS TESTS LIBS DATA DOCS $(GROUPS)
APPS.dir = apps
APPS.desc = Application programs
TOOLS.dir = tools
TOOLS.desc = Miscelaneous tools
TESTS.dir = tests
TESTS.desc = Small programs for testing
LIBS.dir = libs
LIBS.desc = Project libraries
DATA.dir = data
DATA.desc = Project data files
DOCS.dir = docs
DOCS.desc = Documentation files

# A newline
define NL


endef
# A comma
COMMA=,
# Useful macro to strip extension from a file
NOSUFFIX=$(subst $(suffix $1),,$1)
# This function should print its argument to the terminal
SAY = @echo '$(subst ','\'',$1)'
# Create a possibly multi-level directory
MKDIR = mkdir -p $1
# How to remove one or more files without stupid questions
RM = rm -f $1
# Recursively remove files by mask $2 in directory $1
RRM = find $1 -name $2 | xargs rm -rf
# How to remove a directory recursively
RMDIR = rm -rf $1
# How to copy a file
CP = cp $1 $2
# How to set the last modification date on a file to current
TOUCH = touch $1
# How to install one or several files
INSTALL = $(foreach _,$1,$(call SINGLE.INSTALL,$_,$2,$3)$(NL))
# How to install one or several directories
INSTALLDIR = $(foreach _,$1,$(call SINGLE.INSTALLDIR,$_,$2,$3)$(NL))

# Pseudo-file-extensions (for cross-platform filenames)
# For executable files:
E = @exe@
# Library files (either static or dynamic, depends on SHARED.$(libname))
L = @lib@
# Pseudo-extension for documentation modules
D = @doc@

# Base directory for output files
OUTBASE=out
# The actual directo+ry for output files
OUT = $(OUTBASE)/$(TARGET)/$(MODE)/
# A list of directories for output files
OUTDIRS := $(OUT)

# Check if MODE has an allowed value
ifeq ($(findstring /$(MODE)/,/release/debug/),)
$(error Incorrect value for the MODE variable: $(MODE))
endif

# Include host-dependent definitions
include build/mak/host/$(HOST).mak
# Include target-dependent definitions
include build/mak/target/$(TARGET).mak

# Expand a target name into an actual file name ($1 - target)
MKDEPS.DEFAULT = $(addprefix $$(OUT),$1)
# Call the appropiate MKDEPS macro ($1 - toolkit, $2 - target)
MKDEPS = $(call MKDEPS.$(if $(MKDEPS.$1),$1,DEFAULT),$2)
# Now includue the definitions for all known compilers
include $(wildcard build/mak/compiler/*.mak)
# And finally include submakefiles for all modules
SUBMAKEFILES += $(foreach x,$(GROUPS),$(wildcard $($x.dir)/*.mak $($x.dir)/*/*.mak))
include $(SUBMAKEFILES)

# Separator line -- $-, that is :-)
-=------------------------------------------------------------------------

# Show help for one group of targets:
# $1 - Group base name,
define SAYHELP
  $(if $(firstword $($1)),
	$(call SAY,$($1.dir) - $($1.desc))
	$(foreach y,$($1),$(call SAY,    $y - $(DESCRIPTION.$y))$(NL))
  )
endef

define GENHELP
	$(call SAY,dep - Generate all dependency files)
	$(call SAY,all - Build the whole project)
	$(call SAY,clean - Clean all object$(COMMA) executable and dependency files)
	$(call SAY,distclean - Clean everything that shouldn't get into distribution archive)
	$(call SAY,cleandep - Clean all dependency files)
	$(call SAY,cleangen - Clean all autogenerated source files)
	$(call SAY,install - Build and install anything installable from this project)
	$(foreach x,$(filter-out $(INSTALL.EXCLUDE),$(INSTALL.TARGETS)),\
		$(if $(DESCRIPTION.$x),\
			$(call SAY,    install-$x - Install $(DESCRIPTION.$x))$(NL)))
endef

# Show help by default
showhelp:
	$(call SAY,$-)
	$(call SAY,You must choose one of the following targets for building:)
	$(call SAY,$-)
	$(GENHELP)
	$(foreach x,$(GROUPS),$(call SAYHELP,$x))
	$(call SAY,$-)

# Generate dependency files
dep depend:
ifneq ($(AUTODEP),1)
	@$(MAKE) --no-print-directory dep AUTODEP=1
else
	$(call SAY,done)
endif

# Make the 'all' target which builds all groups
all: $(foreach x,$(GROUPS),$($x.dir))
# Make separate targets to build whole groups
$(foreach x,$(GROUPS),$(eval $($x.dir): $($x)))
# Make separate targets to install whole groups
$(foreach x,$(GROUPS),$(eval install-$($x.dir): install-$($x)))

# The name of the toolkit to build target $2 from module $1
.TKNAME = $(if $(TOOLKIT.$2),$(TOOLKIT.$2),$(if $(TOOLKIT.$1),$(TOOLKIT.$1),$(TOOLKIT)))
# Extract just the unique directory names from a list of source files
.DIRLIST = $(filter $(firstword $(dir $1))%,$(sort $(dir $1)))
# Return the given $1 flags (CFLAGS/CXXFLAGS/LDFLAGS) for the module $2/target $3
.SYSLIBS = $(foreach 3,$(SYSLIBS.$2),$(subst $(COMMA),$$(COMMA),$($1.$3)))
# Installation directory for module $1 target $2, default value $3
.INSTDIR = $(INSTALL_PREFIX)$(if $(INSTDIR.$2),$(INSTDIR.$2),$(if $(INSTDIR.$1),$(INSTDIR.$1),$3))

# Okay, here goes the horror part :)
# $1 - module name
define RULES.MODULE
.PHONY: $1
$1: outdirs $(foreach 2,$(TARGETS.$1),$(call XFNAME.$(.TKNAME),$2))
$(foreach 2,$(TARGETS.$1),$(if $(SRC.$2),
ifeq ($(AUTODEP)$(findstring install,$(MAKECMDGOALS)),1)
$(call MKDRULES.$(.TKNAME),$(OUT)deps/$2.dep,$(OUT)deps/.dir $(SRC.$1) $(SRC.$2),$1,$2)
endif
-include $(OUT)deps/$2.dep
DEPS.$2 = $(call MKDEPS,$(.TKNAME),$(SRC.$1) $(SRC.$2)) $(foreach 3,$(filter %$L,$(LIBS.$1) $(LIBS.$2)),$(call XFNAME.$(.TKNAME),$3))
OUTDIRS += $$(dir $$(DEPS.$2))
$(call MKCRULES.$(.TKNAME),$(SRC.$1) $(SRC.$2),$(call .DIRLIST,$(SRC.$1) $(SRC.$2)),$1,$2)
$(call MKLRULES.$(.TKNAME),$(call XFNAME.$(.TKNAME),$2),$$(DEPS.$2),$1,$2)
))
endef

# Evaluate build rules for all modules
$(eval $(foreach x,$(foreach y,$(GROUPS) AUX,$($y)),$(call RULES.MODULE,$x)))

# Generate the installation rules for given module
# $1 - module name
define INSTRULES.MODULE
.PHONY: install-$1
install: install-$1
install-$1: outdirs $(foreach 2,$(TARGETS.$1),$(call XFNAME.$(.TKNAME),$2))\
$(foreach 2,$(TARGETS.$1),$(call MKIRULES.$(.TKNAME),$1,$2,$(call XFNAME.$(.TKNAME),$2)))

endef

# Evaluate install rules for installable modules
$(eval $(foreach x,$(filter-out $(INSTALL.EXCLUDE),$(INSTALL.TARGETS)),$(call INSTRULES.MODULE,$x)))

# Debug target to look at autogenerated rules
showrules:
	@echo -e '$(subst $(NL),\n,$(foreach x,$(foreach y,$(GROUPS) AUX,$($y)),$(call RULES.MODULE,$x)))'
	@echo -e '$(subst $(NL),\n,$(foreach x,$(filter-out $(INSTALL.EXCLUDE),$(INSTALL.TARGETS)),$(call INSTRULES.MODULE,$x)))'

OUTDIRS := $(sort $(OUTDIRS))

# Clean the currently configured output directory
clean:
	$(call RMDIR,$(OUT))

# Clean all autogenerated source files
cleangen:
	$(if $(GENFILES),$(call RM,$(GENFILES)))

# Clean the whole output directory for all configs
distclean:
	$(call RMDIR,$(OUTBASE))

# Clean all dependency files
cleandep:
	$(call RMDIR,$(OUT)deps/)

# How to create all output directories at once
outdirs: $(OUTDIRS)
$(OUTDIRS):
	$(call MKDIR,$@)

# This flag file is required so that .dep file do not depend on the $(OUT)deps/
# directory, but on this file. If they depend on the directory, all .dep files
# will be re-created every time the timestamp on the deps directory change
# (that is, every time at least one .dep file is re-created all other files
# are rebuilt as well).
$(OUT)deps/.dir:
	$(call MKDIR,$(OUT)deps)
	$(call TOUCH,$@)
