WHAT IS IT
----------

The goal of the lensfun library is to provide a open soruce database
of photographic lenses and their characteristics. In the past there
was a effort in this direction (see http://www.epaperpress.com/ptlens/),
but then author decided to take the commercial route and the database
froze at the last public stage. This database was used as the basement
on which lensfun database grew, thanks to PTLens author which gave his
permission for this, while the code was totally rewritten from scratch
(and the database was converted to a totally new, XML-based format).

The lensfun library not only provides a way to read the database
and search for specific things in it, but also provides a set of
algorithms for correcting images based on detailed knowledge of
lens properties. Right now lensfun is designed to correct
distortion, transversal (also known as lateral) chromatic aberrations,
vignetting and colour contribution of the lens (e.g. when sometimes
people says one lens gives "yellowish" images and another, say, "bluish").

The interface is defined both using C++ style and plain C.
The C interface is a wrapper around the C++ classes.


LICENSE
-------

This library is licensed under the GNU Lesser General Public License,
version 3, which can be found in the file lgpl-3.0.txt. It, in turn,
is based on the GNU General Public License version 3, which can be
found in the file gpl-3.0.txt.


FURTHER DIRECTIONS
------------------

To build the library, you must first configure the library and then
build it, as usual. In order to successfully configure and build
the project the following tools are more or less required:

	- Python to run the configure script.
	- GNU Make 3.80 or later to run the (rather complex) makefiles.
	- Doxygen in order to generate the library documentation.
	- GLib 2.0 and later which is used for low-level I/O.
	- libpng is required to build and run test programs.

Then type:

	./configure [--prefix=/usr] [...]

almost as usual. This project does not use autoconf, but the configure
script tries to mimic it. You can get a list of configure options by typing

	./configure --help

as usual. After that you can build one or several "modules" (which are
the separate pieces which together form this whole project). To see what
modules are there, type "make" without parameters. For example, to build
all test programs, type:

	make tests

If you're just going to build, install and forget it, your route is:

	make install

The build system will automatically build just what's needed to be installed
and then copy the resulting files to the appropiate subdirectories.

If you're curious to see the full commands used while building, set the
makefile variable "V" to 1, e.g:

	make install V=1

If for some reason you need a static library (by default a shared library is
built), you must use the --staticlibs configure switch, which will force all
shared libraries to be built statically. For example it is more convenient
to debug with static libraries, because you don't have to set the
LD_LIBRARY_PATH variable to the directory where the shared libraries
are built.

The build system allows quick switching between compiling in debug and
release mode. You can choose the build mode by specifying a value to the
MODE makefile variable, e.g:

	make MODE=debug


DOCUMENTATION
-------------

The end-user documentation for the library can be built by issuing the
command:

	make docs


CREDITS
-------

Here goes a full list of people who have contributed to this library:

CODE:
	Andrew Zabolotny <zap@homelink.ru>

LENS DATA:
	Tom Niemann: original open-source ptlens database.
